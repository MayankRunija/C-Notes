Decision Control Structure

In serious programming situations, seldom do we want the instructions to be executed sequentially. 
Many a times, we want a set of instructions to be executed in one situation, 
and an entirely different set of instructions to be executed in another situation. 
This kind of situation is dealt in C programs using a decision control instruction.
A decision control instruction can be implemented in C using:

(a) The if statement:- C uses the keyword if to implement the decision control instruction. The general form of if statement looks like this:

if ( this condition is true )
execute this statement ;

The keyword if tells the compiler that what follows is a decision control instruction. 
The condition following the keyword if is always enclosed within a pair of parentheses. 
If the condition, whatever it is, is true, then the statement is executed. If the condition is not true then the statement is not executed.

x == y x is equal to y
x != y x is not equal to y
x < y x is less than y
x > y x is greater than y
x <= y x is less than or equal to y
x >= y x is greater than or equal to y

(b)The if-else statement:-we can execute one group of statements if the expression 
evaluates to true and another group of statements if the expression evaluates to false we can use else statement


example :-If his basic salary is less than Rs. 1500, then HRA = 10% of basic
salary and DA = 90% of basic salary. If his salary is either equal to
or above Rs. 1500, then HRA = Rs. 500 and DA = 98% of basic
salary. If the employee's salary is input through the keyboard write
a program to find his gross salary.

/* Calculation of gross salary */

main( )

{

float bs, gs, da, hra ;

printf ( "Enter basic salary " ) ;

scanf ( "%f", &bs ) ;

if ( bs < 1500 )
{
hra = bs * 10 / 100 ;
da = bs * 90 / 100 ;
}

else
{
hra = 500 ;
da = bs * 98 / 100 ;
}

gs = bs + hra + da ;
printf ( "gross salary = Rs. %f", gs ) ;

}

Use of Logical Operators:-

 C allows usage of three logical operators, namely, &&, || and !. These are to be read as ‘AND’ ‘OR’ and ‘NOT’ respectively. 
 The first two operators, && and ||, allow two or more conditions to be combined in an if statement. Let us see how they are used in a program.

The ! Operator :- The third logical operator is the NOT operator, written as !. This operator reverses the result of the expression it operates on.

 !              Logical NOT
 * / %          Arithmetic and modulus
 + -            Arithmetic
 < > <= >=      Relational
 == !=          Relational
 &&             Logical AND
 ||             Logical OR
 =              Assignment



(c)The conditional operators :- The conditional operators ? and : are sometimes called ternary operators since they take three arguments. 
In fact, they form a kind of foreshortened if-then-else. Their general form is, expression 1 ? expression 2 : expression 3 
What this expression says is: “if expression 1 is true (that is, if its value is non-zero), then the value returned will be expression 2, 
otherwise the value returned will be expression 3

